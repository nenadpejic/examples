/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PathlessLayoutRouteRouteImport } from './routes/_pathlessLayout/route'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as PathlessLayoutIndexRouteImport } from './routes/_pathlessLayout/index'
import { Route as PathlessLayoutTodosIndexRouteImport } from './routes/_pathlessLayout/todos/index'
import { Route as PathlessLayoutTodosTodoIdIndexRouteImport } from './routes/_pathlessLayout/todos/$todoId/index'
import { Route as PathlessLayoutTodosTodoIdEditIndexRouteImport } from './routes/_pathlessLayout/todos/$todoId/edit/index'

const PathlessLayoutRouteRoute = PathlessLayoutRouteRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutIndexRoute = PathlessLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutTodosIndexRoute =
  PathlessLayoutTodosIndexRouteImport.update({
    id: '/todos/',
    path: '/todos/',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any)
const PathlessLayoutTodosTodoIdIndexRoute =
  PathlessLayoutTodosTodoIdIndexRouteImport.update({
    id: '/todos/$todoId/',
    path: '/todos/$todoId/',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any)
const PathlessLayoutTodosTodoIdEditIndexRoute =
  PathlessLayoutTodosTodoIdEditIndexRouteImport.update({
    id: '/todos/$todoId/edit/',
    path: '/todos/$todoId/edit/',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof PathlessLayoutIndexRoute
  '/login': typeof LoginIndexRoute
  '/todos': typeof PathlessLayoutTodosIndexRoute
  '/todos/$todoId': typeof PathlessLayoutTodosTodoIdIndexRoute
  '/todos/$todoId/edit': typeof PathlessLayoutTodosTodoIdEditIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof PathlessLayoutIndexRoute
  '/login': typeof LoginIndexRoute
  '/todos': typeof PathlessLayoutTodosIndexRoute
  '/todos/$todoId': typeof PathlessLayoutTodosTodoIdIndexRoute
  '/todos/$todoId/edit': typeof PathlessLayoutTodosTodoIdEditIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren
  '/_pathlessLayout/': typeof PathlessLayoutIndexRoute
  '/login/': typeof LoginIndexRoute
  '/_pathlessLayout/todos/': typeof PathlessLayoutTodosIndexRoute
  '/_pathlessLayout/todos/$todoId/': typeof PathlessLayoutTodosTodoIdIndexRoute
  '/_pathlessLayout/todos/$todoId/edit/': typeof PathlessLayoutTodosTodoIdEditIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/todos'
    | '/todos/$todoId'
    | '/todos/$todoId/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/todos' | '/todos/$todoId' | '/todos/$todoId/edit'
  id:
    | '__root__'
    | '/_pathlessLayout'
    | '/_pathlessLayout/'
    | '/login/'
    | '/_pathlessLayout/todos/'
    | '/_pathlessLayout/todos/$todoId/'
    | '/_pathlessLayout/todos/$todoId/edit/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/': {
      id: '/_pathlessLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PathlessLayoutIndexRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/todos/': {
      id: '/_pathlessLayout/todos/'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof PathlessLayoutTodosIndexRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/todos/$todoId/': {
      id: '/_pathlessLayout/todos/$todoId/'
      path: '/todos/$todoId'
      fullPath: '/todos/$todoId'
      preLoaderRoute: typeof PathlessLayoutTodosTodoIdIndexRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/todos/$todoId/edit/': {
      id: '/_pathlessLayout/todos/$todoId/edit/'
      path: '/todos/$todoId/edit'
      fullPath: '/todos/$todoId/edit'
      preLoaderRoute: typeof PathlessLayoutTodosTodoIdEditIndexRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
  }
}

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutIndexRoute: typeof PathlessLayoutIndexRoute
  PathlessLayoutTodosIndexRoute: typeof PathlessLayoutTodosIndexRoute
  PathlessLayoutTodosTodoIdIndexRoute: typeof PathlessLayoutTodosTodoIdIndexRoute
  PathlessLayoutTodosTodoIdEditIndexRoute: typeof PathlessLayoutTodosTodoIdEditIndexRoute
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutIndexRoute: PathlessLayoutIndexRoute,
  PathlessLayoutTodosIndexRoute: PathlessLayoutTodosIndexRoute,
  PathlessLayoutTodosTodoIdIndexRoute: PathlessLayoutTodosTodoIdIndexRoute,
  PathlessLayoutTodosTodoIdEditIndexRoute:
    PathlessLayoutTodosTodoIdEditIndexRoute,
}

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
